/*
 * Copyright 2021 - 2024 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */

//file:noinspection ConfigurationAvoidance
import java.time.LocalDateTime

apply plugin: 'java-library'
apply plugin: 'infra.cloud.conventions'
apply plugin: 'infra.cloud.optional-dependencies'
apply from: "$rootDir/gradle/publications.gradle"

String[] javadocLinks = [
    "https://docs.oracle.com/en/java/javase/17/docs/api/"
]

jar {
  manifest.attributes["Implementation-Title"] = project.name
  manifest.attributes["Implementation-Version"] = project.version
  manifest.attributes["Implementation-Build"] = LocalDateTime.now()
  manifest.attributes["Implementation-Vendor"] = 'TODAY Tech'
  manifest.attributes["Implementation-Vendor-Id"] = 'cn.taketoday'
  manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')  // for Jigsaw
  manifest.attributes["Created-By"] =
      "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
}

normalization {
  runtimeClasspath {
    ignore "META-INF/MANIFEST.MF"
  }
}

javadoc {
  description = "Generates project-level javadoc for use in -javadoc jar"

  options.encoding = "UTF-8"
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.author = true
  options.header = project.name
  options.use = true
  options.links(javadocLinks)
  // Check for syntax during linting. 'none' doesn't seem to work in suppressing
  // all linting warnings all the time (see/link references most notably).
  options.addStringOption("Xdoclint:syntax", "-quiet")

  failOnError = false
  // Suppress warnings due to cross-module @see and @link references.
  // Note that global 'api' task does display all warnings, and
  // checks for 'reference' on top of 'syntax'.
  logging.captureStandardError LogLevel.INFO
  logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveClassifier.set("sources")
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  archiveClassifier.set("javadoc")
  from javadoc
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}

// Disable publication of test fixture artifacts.
if (configurations.findByName("testFixturesApiElements") != null) {
  components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) { skip() }
  components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) { skip() }
}
