def testToolchainConfigured() {
  return project.hasProperty('testToolchain') && project.testToolchain
}

def testToolchainLanguageVersion() {
  if (testToolchainConfigured()) {
    return JavaLanguageVersion.of(project.testToolchain.toString())
  }
  return JavaLanguageVersion.of(17)
}

plugins.withType(JavaPlugin).configureEach {
  // Configure a specific Java Toolchain for compiling and running tests if the 'testToolchain' property is defined
  if (testToolchainConfigured()) {
    def testLanguageVersion = testToolchainLanguageVersion()
    tasks.withType(JavaCompile).matching { it.name.contains("Test") }.configureEach {
      javaCompiler.set(javaToolchains.compilerFor {
        languageVersion = testLanguageVersion
      })
    }
    tasks.withType(Test).configureEach {
      javaLauncher.set(javaToolchains.launcherFor {
        languageVersion = testLanguageVersion
      })
    }
  }
}

// Store resolved Toolchain JVM information as custom values in the build scan.
rootProject.ext {
  resolvedMainToolchain = false
  resolvedTestToolchain = false
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (!resolvedMainToolchain && task instanceof JavaCompile && task.javaCompiler.isPresent()) {
//    def metadata = task.javaCompiler.get().metadata
//    task.project.buildScan.value('Main toolchain', "$metadata.vendor $metadata.languageVersion ($metadata.installationPath)")
    resolvedMainToolchain = true
  }
  if (testToolchainConfigured() && !resolvedTestToolchain && task instanceof Test && task.javaLauncher.isPresent()) {
//    def metadata = task.javaLauncher.get().metadata
//    task.project.buildScan.value('Test toolchain', "$metadata.vendor $metadata.languageVersion ($metadata.installationPath)")
    resolvedTestToolchain = true
  }
}
